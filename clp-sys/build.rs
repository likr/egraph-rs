extern crate bindgen;
extern crate cc;

use std::env;
use std::path::PathBuf;

fn main() {
    cc::Build::new()
        .cpp(true)
        .flag("-w")
        .flag("-msse")
        .flag("-msse2")
        .flag("-msse3")
        .flag("-DNDEBUG")
        // .flag("-DHAVE_CONFIG_H")
        // .flag("-DCOINUTILS_BUILD")
        .flag("-DHAVE_CFLOAT")
        .flag("-DHAVE_CMATH")
        .flag("-DHAVE_DLFCN_H")
        .flag("-DHAVE_INTTYPES_H")
        .flag("-DHAVE_MEMORY_H")
        .flag("-DHAVE_STDINT_H")
        .flag("-DHAVE_STDLIB_H")
        .flag("-DHAVE_STRINGS_H")
        .flag("-DHAVE_STRING_H")
        .flag("-DHAVE_SYS_STAT_H")
        .flag("-DHAVE_SYS_TYPES_H")
        .flag("-DHAVE_UNISTD_H")
        .flag("-Ivendor/CoinUtils/CoinUtils/src")
        // .file("vendor/CoinUtils/CoinUtils/src/CoinAlloc.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinOslFactorization.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveMatrix.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinBuild.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinOslFactorization2.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveMonitor.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinDenseFactorization.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinOslFactorization3.cpp")
        // .file("vendor/CoinUtils/CoinUtils/src/CoinPresolvePsdebug.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinDenseVector.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPackedMatrix.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveSingleton.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinError.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPackedVector.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveSubst.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFactorization1.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPackedVectorBase.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveTighten.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFactorization2.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinParam.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveTripleton.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFactorization3.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinParamUtils.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveUseless.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFactorization4.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPostsolveMatrix.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveZeros.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFileIO.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPrePostsolveMatrix.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinRational.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinFinite.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveDoubleton.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinSearchTree.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinIndexedVector.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveDual.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinShallowPackedVector.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinLpIO.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveDupcol.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinSimpFactorization.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinMessage.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveEmpty.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinSnapshot.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinMessageHandler.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveFixed.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinStructuredModel.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinModel.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveForcing.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinWarmStartBasis.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinModelUseful.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveHelperFunctions.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinWarmStartDual.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinModelUseful2.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveImpliedFree.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinWarmStartPrimalDual.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinMpsIO.cpp")
        .file("vendor/CoinUtils/CoinUtils/src/CoinPresolveIsolated.cpp")
        // .file("vendor/CoinUtils/CoinUtils/src/CoinWarmStartVector.cpp")
        .compile("CoinUtils");

    cc::Build::new()
        .cpp(true)
        .flag("-Wno-parentheses-equality")
        .flag("-Wno-constant-conversion")
        .flag("-Wno-deprecated-declarations")
        .flag("-Wno-unused-variable")
        .flag("-Wno-unused-parameter")
        .flag("-Wno-unused-private-field")
        .flag("-Wno-self-assign")
        .flag("-Wno-ignored-qualifiers")
        .flag("-Wno-constant-logical-operand")
        .flag("-msse")
        .flag("-msse2")
        .flag("-msse3")
        .flag("-DNDEBUG")
        // .flag("-DHAVE_CONFIG_H")
        // .flag("-DCLP_BUILD")
        .flag("-DHAVE_CFLOAT")
        .flag("-DHAVE_CMATH")
        .flag("-DHAVE_DLFCN_H")
        .flag("-DHAVE_INTTYPES_H")
        .flag("-DHAVE_MEMORY_H")
        .flag("-DHAVE_STDINT_H")
        .flag("-DHAVE_STDLIB_H")
        .flag("-DHAVE_STRINGS_H")
        .flag("-DHAVE_STRING_H")
        .flag("-DHAVE_SYS_STAT_H")
        .flag("-DHAVE_SYS_TYPES_H")
        .flag("-DHAVE_UNISTD_H")
        .flag("-Ivendor/CoinUtils/CoinUtils/src")
        .flag("-Ivendor/Clp/Clp/src")
        .file("vendor/Clp/Clp/src/ClpCholeskyBase.cpp")
        .file("vendor/Clp/Clp/src/ClpCholeskyDense.cpp")
        .file("vendor/Clp/Clp/src/ClpConstraint.cpp")
        .file("vendor/Clp/Clp/src/ClpConstraintLinear.cpp")
        .file("vendor/Clp/Clp/src/ClpConstraintQuadratic.cpp")
        .file("vendor/Clp/Clp/src/Clp_C_Interface.cpp")
        .file("vendor/Clp/Clp/src/ClpDualRowDantzig.cpp")
        .file("vendor/Clp/Clp/src/ClpDualRowPivot.cpp")
        .file("vendor/Clp/Clp/src/ClpDualRowSteepest.cpp")
        .file("vendor/Clp/Clp/src/ClpDummyMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpDynamicExampleMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpDynamicMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpEventHandler.cpp")
        .file("vendor/Clp/Clp/src/ClpFactorization.cpp")
        .file("vendor/Clp/Clp/src/ClpGubDynamicMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpGubMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpHelperFunctions.cpp")
        .file("vendor/Clp/Clp/src/ClpInterior.cpp")
        .file("vendor/Clp/Clp/src/ClpLinearObjective.cpp")
        .file("vendor/Clp/Clp/src/ClpMatrixBase.cpp")
        .file("vendor/Clp/Clp/src/ClpMessage.cpp")
        .file("vendor/Clp/Clp/src/ClpModel.cpp")
        .file("vendor/Clp/Clp/src/ClpNetworkBasis.cpp")
        .file("vendor/Clp/Clp/src/ClpNetworkMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpNonLinearCost.cpp")
        .file("vendor/Clp/Clp/src/ClpNode.cpp")
        .file("vendor/Clp/Clp/src/ClpObjective.cpp")
        .file("vendor/Clp/Clp/src/ClpPackedMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpPlusMinusOneMatrix.cpp")
        .file("vendor/Clp/Clp/src/ClpPredictorCorrector.cpp")
        .file("vendor/Clp/Clp/src/ClpPdco.cpp")
        .file("vendor/Clp/Clp/src/ClpPdcoBase.cpp")
        .file("vendor/Clp/Clp/src/ClpLsqr.cpp")
        .file("vendor/Clp/Clp/src/ClpPresolve.cpp")
        .file("vendor/Clp/Clp/src/ClpPrimalColumnDantzig.cpp")
        .file("vendor/Clp/Clp/src/ClpPrimalColumnPivot.cpp")
        .file("vendor/Clp/Clp/src/ClpPrimalColumnSteepest.cpp")
        .file("vendor/Clp/Clp/src/ClpQuadraticObjective.cpp")
        .file("vendor/Clp/Clp/src/ClpSimplex.cpp")
        .file("vendor/Clp/Clp/src/ClpSimplexDual.cpp")
        .file("vendor/Clp/Clp/src/ClpSimplexNonlinear.cpp")
        .file("vendor/Clp/Clp/src/ClpSimplexOther.cpp")
        .file("vendor/Clp/Clp/src/ClpSimplexPrimal.cpp")
        .file("vendor/Clp/Clp/src/ClpSolve.cpp")
        .file("vendor/Clp/Clp/src/Idiot.cpp")
        .file("vendor/Clp/Clp/src/IdiSolve.cpp")
        // .file("vendor/Clp/Clp/src/ClpCholeskyPardiso.cpp")
        .file("vendor/Clp/Clp/src/ClpPESimplex.cpp")
        .file("vendor/Clp/Clp/src/ClpPEPrimalColumnSteepest.cpp")
        .file("vendor/Clp/Clp/src/ClpPEDualRowDantzig.cpp")
        .file("vendor/Clp/Clp/src/ClpPEDualRowSteepest.cpp")
        .compile("Clp");

    let bindings = bindgen::Builder::default()
        .clang_arg("-Ivendor/CoinUtils/CoinUtils/src")
        .clang_arg("-Ivendor/Clp/Clp/src")
        .clang_arg("-Ivendor/Cbc/Cbc/src")
        .header("wrapper.h")
        .trust_clang_mangling(false)
        .generate()
        .expect("Unable to generate bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}
