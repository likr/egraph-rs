# 開発にあたって

## タスク完了前チェックリスト

以下の手順を順番に実行し、タスクを完了してください：

1. フォーマッターとリンターの実行
   - `cargo fmt --all`
   - `cargo clippy --workspace --all-targets --all-features -- -D warnings`

2. テストの実行
   - `cargo test --workspace`

3. タスクの完了確認
   - すべての要件が満たされているか確認
   - フォーマッター、リンター、テストがすべて成功していることを確認

4. コミットの提案
   - Conventional Commits形式でコミットメッセージを作成
   - ユーザーにコミットを促す

5. 自己改善
   - タスク遂行を振り返り、改善点を検討
   - `.clinerules`の更新が必要か確認
   - 開発プロセスの改善提案があれば共有

## 一般的な開発原則 (General Development Principles)

以下の項目は、プロジェクトの種類に依存しない一般的な開発の進め方に関する指示です。

- **テスト:** タスクを完了する前にテストを実行し、プロジェクトが正しく動作することを確認してください。具体的なテストコマンドは「プロジェクト固有の情報」セクションを参照してください。
- **Linter/Formatter:** LinterやFormatterを実行し、コードスタイルを統一し、潜在的な問題を早期に発見してください。具体的なコマンドは「プロジェクト固有の情報」セクションを参照してください。
- **依存関係:** 新しくライブラリを導入するときは、特別な指定がない限り、最新の安定バージョンを使用することを検討してください。ライブラリのドキュメントを参照し、適切なバージョンを選択してください。依存関係の追加方法は「プロジェクト固有の情報」セクションを参照してください。
- **ドキュメント参照:** 新しいライブラリや既存ライブラリの機能を使用する際には、公式ドキュメントや関連資料（例: Rustの場合は `docs.rs`）を参照してください。
- **Git:**
    - タスク完了時には、変更内容をGitにコミットすることをユーザー（私）に促してください。コミットメッセージの規約（例: Conventional Commits）の採用も検討してください。
    - Gitの操作（`commit`, `push`, `pull`, `merge`など）は、実行前に必ずユーザーに許可を求めてください。
- **自己改善:** タスク遂行を振り返り、今後の開発を円滑に進めるための改善点（この `.clinerules` の更新を含む）があれば提案してください。

## 一般的なコーディングスタイル (General Coding Styles)

### Rust
- **Edition:** プロジェクトで使用するRustのEditionを明確に定義してください。具体的なEditionは「プロジェクト固有の情報」セクションを参照してください。
- **Linter/Formatter:** `rustfmt` によるフォーマット統一と、 `clippy` によるLintチェックを推奨します。
- **コメント (Comments):**
    - ドキュメンテーションコメント (`///`, `//!`) 以外は、原則としてコードの意図や理由 (**Why**) を記述します。
    - コードの動作手順 (**How**) の詳細な説明は避けます（コード自体が示すべきです）。
    - 不要なコードのコメントアウトや、作業途中のメモは削除します。
    - コードのコメントは必ず英語で記述してください。これには、ドキュメンテーションコメント、インラインコメント、TODOコメントなどすべてのコメントが含まれます。

### JavaScript/TypeScript/JSON 等
- **Formatter:** `prettier` などのFormatterを使用してコードスタイルを統一することを推奨します。

### 言語 (Language)
- **コードコメント:** すべてのソースコード内のコメントは英語で記述してください。
- **コミットメッセージ:** Git のコミットメッセージはすべて英語で記述してください。Conventional Commits 形式に従って作成してください。

## プロジェクト固有の情報

プロジェクト固有の情報（アーキテクチャ、構成、コマンド、ツールなど）については、プロジェクトルートにある `PROJECT_SUMMARY.md` ファイルを参照してください。このファイルには以下の情報が含まれています：

- プロジェクト構成
- 開発ツールとコマンド
- アーキテクチャ概要
- 各コンポーネントの説明
- プロジェクトの目的

この文書は、プロジェクトの全体像を把握するための最初のリファレンスとして使用してください。
