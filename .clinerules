# 開発にあたって

## 最初に実行すべき重要な指示

**このファイルの内容を必ず読んでください。タスク開始時に `read_file .clinerules` コマンドを実行することを強く推奨します。**

> 本ファイルの内容は自動的にシステムに読み込まれますが、明示的に読み込むことで指示の遵守率が向上します。

## .clinerules 遵守のためのガイドライン

このセクションでは、`.clinerules`ファイルの指示を確実に遵守するためのガイドラインと仕組みを提供します。

### タスク実行プロセス

#### 1. タスク開始時のプロセス

```mermaid
flowchart TD
    A[タスク開始] --> B[タスクの指示内容を理解]
    B --> C[.clinerules適用済み指示を認識]
    C --> D[PROJECT_SUMMARY.mdでプロジェクト構造確認]
    D --> E[関連ファイル・コード規約の確認]
    E --> F[チェックリストの内部タスクリスト化]
    F --> G[タスク実行開始]
```

**タスク開始時チェックリスト**:
- [ ] システムに適用されている`.clinerules`の指示内容を認識
- [ ] `PROJECT_SUMMARY.md`を読み込み、プロジェクト構造を確認
- [ ] 関連するコードファイルを確認し、コーディングスタイルを把握
- [ ] タスク完了時のチェックリストを内部タスクとして記録

#### 2. タスク実行中の継続的確認

```mermaid
flowchart TD
    A[コード修正] --> B{英語コメント?}
    B -->|Yes| C{コメントは理由を説明?}
    B -->|No| D[英語コメントに修正]
    C -->|Yes| E{フォーマット規則に従っている?}
    C -->|No| F[コメントを修正]
    E -->|Yes| G[次の実装ステップへ]
    E -->|No| H[フォーマット修正]
    D --> C
    F --> E
    H --> G
```

**実装中のチェックポイント**:
- [ ] すべてのコメントは英語で記述されているか
- [ ] コメントは「なぜそうしているのか」(Why)を説明しているか
- [ ] コードはプロジェクトのスタイルガイドに準拠しているか
- [ ] コミットメッセージ案を Conventional Commits 形式で準備

#### 3. タスク完了前の最終確認

```mermaid
flowchart TD
    A[実装完了] --> B[フォーマッターの実行]
    B --> C[リンターの実行]
    C --> D[テストの実行]
    D --> E{すべて成功?}
    E -->|Yes| F[コミットメッセージ作成]
    E -->|No| G[エラー修正]
    G --> B
    F --> H[ユーザーに完了報告と改善提案]
```

## タスク完了前チェックリスト

以下の手順を順番に実行し、タスクを完了してください：

1. フォーマッターとリンターの実行
   - `cargo fmt --all`
   - `cargo clippy --workspace --all-targets --all-features -- -D warnings`

2. テストの実行
   - `cargo test --workspace`

3. タスクの完了確認
   - すべての要件が満たされているか確認
   - フォーマッター、リンター、テストがすべて成功していることを確認

4. コミットの提案
   - Conventional Commits形式でコミットメッセージを作成
   - ユーザーにコミットを促す

5. 自己改善
   - タスク遂行を振り返り、改善点を検討
   - `.clinerules`の更新が必要か確認
   - 開発プロセスの改善提案があれば共有

## 一般的な開発原則 (General Development Principles)

> **注意**: タスク開始時には必ず `read_file .clinerules` を実行して、このファイルの内容を確認してください。

以下の項目は、プロジェクトの種類に依存しない一般的な開発の進め方に関する指示です。

- **テスト:** タスクを完了する前にテストを実行し、プロジェクトが正しく動作することを確認してください。具体的なテストコマンドは「プロジェクト固有の情報」セクションを参照してください。
- **Linter/Formatter:** LinterやFormatterを実行し、コードスタイルを統一し、潜在的な問題を早期に発見してください。具体的なコマンドは「プロジェクト固有の情報」セクションを参照してください。
- **依存関係:** 新しくライブラリを導入するときは、特別な指定がない限り、最新の安定バージョンを使用することを検討してください。ライブラリのドキュメントを参照し、適切なバージョンを選択してください。依存関係の追加方法は「プロジェクト固有の情報」セクションを参照してください。
- **ドキュメント参照:** 新しいライブラリや既存ライブラリの機能を使用する際には、公式ドキュメントや関連資料（例: Rustの場合は `docs.rs`）を参照してください。
- **Git:**
    - タスク完了時には、変更内容をGitにコミットすることをユーザー（私）に促してください。コミットメッセージの規約（例: Conventional Commits）の採用も検討してください。
    - Gitの操作（`commit`, `push`, `pull`, `merge`など）は、実行前に必ずユーザーに許可を求めてください。
- **自己改善:** タスク遂行を振り返り、今後の開発を円滑に進めるための改善点（この `.clinerules` の更新を含む）があれば提案してください。

## 一般的なコーディングスタイル (General Coding Styles)

> **重要**: タスク実行前に必ずこのファイルを読み、指示に従ってください。`read_file .clinerules`

### Rust
- **Edition:** プロジェクトで使用するRustのEditionを明確に定義してください。具体的なEditionは「プロジェクト固有の情報」セクションを参照してください。
- **Linter/Formatter:** `rustfmt` によるフォーマット統一と、 `clippy` によるLintチェックを推奨します。
- **コメント (Comments):**
    - ドキュメンテーションコメント (`///`, `//!`) 以外は、原則としてコードの意図や理由 (**Why**) を記述します。
    - コードの動作手順 (**How**) の詳細な説明は避けます（コード自体が示すべきです）。
    - 不要なコードのコメントアウトや、作業途中のメモは削除します。
    - コードのコメントは必ず英語で記述してください。これには、ドキュメンテーションコメント、インラインコメント、TODOコメントなどすべてのコメントが含まれます。

### JavaScript/TypeScript/JSON 等
- **Formatter:** `prettier` などのFormatterを使用してコードスタイルを統一することを推奨します。

### 言語 (Language)
- **コードコメント:** すべてのソースコード内のコメントは英語で記述してください。
- **コミットメッセージ:** Git のコミットメッセージはすべて英語で記述してください。Conventional Commits 形式に従って作成してください。

## Conventional Commits 形式のガイド

コミットメッセージは以下の形式に従って作成してください：

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

- **type**: feat, fix, docs, style, refactor, perf, test, chore
- **scope**: 影響範囲（optional）
- **description**: 変更内容の簡潔な説明

例:
- `feat(layout): add new force-directed layout algorithm`
- `fix(wasm): resolve memory leak in drawing implementation`
- `docs: update API documentation with examples`
- `refactor(sgd): improve performance of distance calculation`

## プロジェクト固有の情報

> **重要**: タスク開始時に、このファイル(.clinerules)の内容を必ず確認してください。
> 
> **指示**: タスク開始時に `read_file .clinerules` を実行してください。

プロジェクト固有の情報（アーキテクチャ、構成、コマンド、ツールなど）については、プロジェクトルートにある `PROJECT_SUMMARY.md` ファイルを参照してください。このファイルには以下の情報が含まれています：

- プロジェクト構成
- 開発ツールとコマンド
- アーキテクチャ概要
- 各コンポーネントの説明
- プロジェクトの目的

この文書は、プロジェクトの全体像を把握するための最初のリファレンスとして使用してください。

## 指示遵守の認識強化と自動化提案

タスク実行中に自動適用されている.clinerules 指示を確実に認識し遵守するため、以下の自動化ツールの導入を検討します:

1. **pre-commit hooks**:
   - コミット前に自動的に fmt と clippy を実行
   - 英語コメントチェッカーの追加

2. **CI 強化**:
   - GitHub Actions にコーディングスタイルチェックを追加

3. **チェックリスト自動生成**:
   - タスク開始時に.clinerules 確認用テンプレートを自動生成するツール

## 結論

.clinerules の指示認識率と遵守率を向上させるには、以下の点が重要です:

1. タスク開始時に自動適用されている.clinerules 指示を明確に認識
2. 実装中の継続的な確認ポイントの設定
3. タスク完了前の徹底したチェックリスト実行
4. 自動化ツールの導入による人的ミスの削減
5. 指示内容の可視化と常時参照可能な環境の整備

これらの施策を実施することで、.clinerules 遵守率の向上と開発プロセスの効率化を同時に達成できます。
