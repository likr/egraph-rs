# Development Guidelines

## Important Initial Instructions

**Please read the contents of this file. It is strongly recommended to execute the `read_file .clinerules` command when starting a task.**

> Although the content of this file is automatically loaded into the system, explicitly reading it improves compliance with the instructions.

## Guidelines for Adhering to .clinerules

This section provides guidelines and mechanisms to ensure adherence to the instructions in the `.clinerules` file.

### Task Execution Process

#### 1. Process at the Start of a Task

```mermaid
flowchart TD
    A[Task Start] --> B[Understand Task Instructions]
    B --> C[Recognize Applied .clinerules Instructions]
    C --> D[Confirm Project Structure in PROJECT_SUMMARY.md]
    D --> E[Check Related Files and Code Conventions]
    E --> F[Create Internal Task List from Checklist]
    F --> G[Begin Task Execution]
```

**Checklist at Task Start**:
- [ ] Recognize the instructions in `.clinerules` applied by the system
- [ ] Read `PROJECT_SUMMARY.md` to understand project structure
- [ ] Check related code files and understand coding style
- [ ] Record task completion checklist as internal tasks

#### 2. Continuous Verification During Task Execution

```mermaid
flowchart TD
    A[Code Modification] --> B{English Comments?}
    B -->|Yes| C{Comments Explain Why?}
    B -->|No| D[Change to English Comments]
    C -->|Yes| E{Follows Format Rules?}
    C -->|No| F[Modify Comments]
    E -->|Yes| G[Proceed to Next Implementation Step]
    E -->|No| H[Fix Formatting]
    D --> C
    F --> E
    H --> G
```

**Check Points During Implementation**:
- [ ] Are all comments written in English?
- [ ] Do comments explain "why" things are done this way?
- [ ] Does the code comply with the project''s style guide?
- [ ] Prepare commit message draft in Conventional Commits format

#### 3. Final Verification Before Task Completion

```mermaid
flowchart TD
    A[Implementation Complete] --> B[Run Formatter]
    B --> C[Run Linter]
    C --> D[Run Tests]
    D --> E{All Successful?}
    E -->|Yes| F[Create Commit Message]
    E -->|No| G[Fix Errors]
    G --> B
    F --> H[Report Completion and Suggest Improvements to User]
```

## Checklist Before Task Completion

Please execute the following steps in order to complete the task:

1. Run Formatter and Linter
   - `cargo fmt --all`
   - `cargo clippy --workspace --all-targets --all-features -- -D warnings`

2. Run Tests
   - `cargo test --workspace`

3. Verify Task Completion
   - Confirm all requirements have been met
   - Verify that formatter, linter, and tests all succeeded

4. Suggest Commit
   - Create a commit message in Conventional Commits format
   - Encourage the user to commit

5. Self-Improvement
   - Reflect on task execution and consider improvements
   - Check if `.clinerules` needs updates
   - Share any suggestions for improving the development process

## General Development Principles

> **Note**: Always execute `read_file .clinerules` at the start of a task to verify the contents of this file.

The following items are instructions for general development approaches that do not depend on the type of project.

- **Tests:** Run tests before completing a task to verify that the project is working correctly. See the "Project Specific Information" section for specific test commands.
- **Linter/Formatter:** Run the linter and formatter to unify code style and detect potential issues early. See the "Project Specific Information" section for specific commands.
- **Dependencies:** When introducing new libraries, consider using the latest stable version unless otherwise specified. Refer to the library documentation and select an appropriate version. See the "Project Specific Information" section for how to add dependencies.
- **Documentation References:** When using new libraries or existing library features, refer to official documentation and related materials (e.g., `docs.rs` for Rust).
- **Git:**
    - When completing a task, encourage the user (me) to commit the changes to Git. Consider adopting commit message conventions (e.g., Conventional Commits).
    - Always request permission from the user before executing Git operations (`commit`, `push`, `pull`, `merge`, etc.).
- **Self-Improvement:** Reflect on the task execution and suggest improvements (including updates to this `.clinerules` file) to facilitate smoother development in the future.

## General Coding Styles

> **Important**: Always read this file before executing a task and follow the instructions. `read_file .clinerules`

### Rust
- **Edition:** Clearly define the Rust Edition used in the project. See the "Project Specific Information" section for the specific Edition.
- **Linter/Formatter:** Recommend using `rustfmt` for unified formatting and `clippy` for lint checking.
- **Comments:**
    - Documentation comments (`///`, `//!`) aside, generally write the intention or reason (**Why**) for the code.
    - Avoid detailed explanations of how the code works (**How**) (the code itself should show this).
    - Remove unnecessary commented-out code or work-in-progress notes.
    - Please write all code comments in English. This includes documentation comments, inline comments, TODO comments, and all other comments.

### JavaScript/TypeScript/JSON etc.
- **Formatter:** Recommend using formatters like `prettier` to unify code style.

### Language
- **Code Comments:** All comments in source code must be written in English.
- **Commit Messages:** All Git commit messages must be written in English. Follow the Conventional Commits format.

## Guide to Conventional Commits Format

Create commit messages in the following format:

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

- **type**: feat, fix, docs, style, refactor, perf, test, chore
- **scope**: area of impact (optional)
- **description**: concise explanation of the change

Examples:
- `feat(layout): add new force-directed layout algorithm`
- `fix(wasm): resolve memory leak in drawing implementation`
- `docs: update API documentation with examples`
- `refactor(sgd): improve performance of distance calculation`

## Project Specific Information

> **Important**: Always verify the contents of this file (.clinerules) at the start of a task.
> 
> **Instruction**: Execute `read_file .clinerules` at the start of a task.

For project-specific information (architecture, configuration, commands, tools, etc.), refer to the `PROJECT_SUMMARY.md` file in the project root. This file contains the following information:

- Project structure
- Development tools and commands
- Architecture overview
- Description of each component
- Project purpose

Use this document as the initial reference for understanding the overall project.

## Enhancing Instruction Compliance Awareness and Automation Suggestions

To ensure recognition and compliance with .clinerules instructions that are automatically applied during task execution, consider implementing the following automation tools:

1. **pre-commit hooks**:
   - Automatically run fmt and clippy before commits
   - Add English comment checker

2. **CI Enhancement**:
   - Add coding style checks to GitHub Actions

3. **Checklist Auto-generation**:
   - Tool to automatically generate .clinerules verification templates at task start

## Conclusion

To improve the recognition and compliance rate of .clinerules instructions, the following points are important:

1. Clearly recognize automatically applied .clinerules instructions at the start of a task
2. Set continuous verification points during implementation
3. Execute thorough checklists before task completion
4. Reduce human error through automation tools
5. Visualize instruction content and maintain an environment where it can be referenced at any time

By implementing these measures, you can simultaneously achieve improved .clinerules compliance and enhanced development process efficiency.
